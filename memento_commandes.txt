Ci-dessous la liste des commandes,leurs fonctions et leurs syntaxes :
-------------------------------------------------------------------------------------------

cd
Permet de naviguer dans les répertoires
Syntaxe: 
cd /répertoire1/répertoire2/....7
Utile:
cd ~/ # permet d'aller dans son répertoire personnel
cd .. # revient dans le dossier parent ( dossier précédent)

ls
Liste le contenu d'un dossier
syntaxe:
ls /répertoire1  #liste le contenu du répertoire1
ls /répertoire1/répertoire2 #liste le contenu du répertoire2 contenu dans le répertoire1
Utile:
ls -a # liste tous les fichiers caché ou pas
ls -l # liste en détaille tous les fichiers (permissions d'accès, le nombre de liens physiques, le nom du propriétaire et du groupe, la taille en octets, et la date de création)
ls -ld # pour les répertoires
ll ou ls -i # liste en détaille tous les fichiers cachés ou pas
ls -R # affiche l'arborescence d'un répertoire

more
affiche le contenu d'un fichier page par page
Syntaxe:
more test.txt # affiche dans la console le contenu du fichier test.txt

less
Affiche le contenu d'un fichier page par page ( plus pratique)
Syntaxe:
less test.txt #affiche dans la console le contenu du fichier test.txt

pwd
Affiche le répertoire/le chemin en cours

mkdir
Créer un dossier
Syntaxe:
mkdir /répertoire1 #crée le répertoire1
mkdir /répertoire1/répertoire2 # crée le répertoire2 dans le répertoire1
Utile:
mkdir -p #permet de crée une arborescence de répertoire ==> rep1/rep2/rep3/rep4.....

rmdir
Supprimer un répertoire VIDE !!
Syntaxe:
rmdir /répertoire1 # supprime le répertoire1
rmdir /répertoire1/répertoire2 # supprime le répertoire2 dans le répertoire1
Utile:
rmdir -p # permet de supprimer une arborescence
rm
Supprimer un fichier/un répertoire
Syntaxe:
rm fichier1 # supprime le fichier1
Utile:
rm -f # supprimer le fichier sans confirmation
rm -r # supprimer récursivement les fichiers ainsi que les répertoires


cp
Copie un fichier ou un répertoire ( ATTENTION!! supprimer/remplace un fichier de même nom)
Syntaxe:
cp fichier1 /répertoire1 # copie le fichier 1 dans le répertoire1
cp /répertoire1 répertoire2/ # copie le répertoire1 dans le répertoire2 ( ATTENTION "/" à la fin)
Utile:
cp -i # Demande une confirmation avant d'écraser sil existe un fichier ou répertoire de même nom
cp -a # copie en gardant les droits,propriétaire,dates
cp -R #copie récursivement ( grâce a cette commande on peut copier un fichier sous un autre nom)


mv
Permet de déplacer ou renommer un fichier ou un répertoire
Syntaxe:
Pour renommer:
mv fichier_a_renommer nom_fichier_renommé 
mv fichier1 fichier2 # renomme le fichier 1 en fichier 2
mv rep1 monrep2 # renomme le répertoire rep1 en monrep2

Pour déplacer:
mv fichier1 rep1/ # déplace le fichier1 dans le répertoire rep1
mv /rep1 rep2/ # déplace le répertoire rep1 dans le répertoire rep2 ( ATTENTION "/" à la fin)
Utile:
mv unRep/monFichier 
Déplace le fichier monFichier du répertoire unRep là où on se trouve


touch
Permet de créer un fichier ou modifier la date d’accès et la  date  de  modification.
Syntaxe:
touch monfichier.txt # crée le fichier monfichier.txt

tar
Permet d'archiver, de compresser un fichier ou un répertoire et dés-archiver un fichier
Option:
-c : crée l'archive
-x: extrait l'archive
-f : utilise le fichier donné en paramètre
-v : active le mode « verbeux » (bavard, affiche ce qu'il fait)
-z : ajoute la compression Gzip.

Syntaxe:
Archiver:
tar czvf test.txt test.tgz # archive et compresse (avec la compression Gzip) le fichier test.txt  dans le fichier test.tgz

Dés-archiver:
tar xzvf test.tgz # dés-archive le contenu de l'archive test.tgz
Utile:
tar  tzvf test.tgz # vérifie/affiche le contenu de l'archive test.tgz

uname
Permet de savoir le nom du noyau
Utile:
uname -r # permet de savoir la version du noyau
uname -a  # permet de savoir le nom du noyau,le nom de la machine,la version du noyau,la date de compilation du noyau et la plateforme ( Intel ou AMD)


grep
Recherche des caractères dans un fichier
Syntaxe:
grep carct1 fich1 #cherche le caractère 'caract' dans le fichier 'fich1'
Utile:
grep -i  #cherche un caractère sans tenir compte de la casse
grep -n # cherche un caractère et affiche les numéros des lignes où il apparait
grep -c # affiche le nombre de ligne dans lequel le caractère recherche apparait


cat
Affiche le contenu d'un fichier
Syntaxe:
cat fich1 #affiche le contenu du fichier 'fich1'
Utile
cat -n #affiche en plus les numéros des lignes


top
Gestionnaire de processus
Utile
top -u utilis1 #affiche les processus de l'utilisateur 'utilis1'

cut
Affiche des parties sélectionnées des lignes de chaque fichier
Utile
cut -d : fichier # va considérer qu'un champs dans la ligne est séparé par des ":"
cud -d / fichier # va considérer qu'un champs dans la ligne est séparé par des ":"
!!Par défaut le délimiteur est une tabulation
cut -fn #sélectionne que le champs numéro n d'une ligne et n'affiche pas le reste
cut -s # supprime









Astuces
Les options :
Le tunnel
|
Sert a rediriger la sortie d'un programme vers un autre
Syntaxe:
prog1 | prog2  # redirige la sortie du programme prog1 vers le programme prog2
Exemple:
Lorsque la sortie de la commande ls est trop nombreux pour être contenu dans la page  du terminal, la redirection vers le programme less ou more permet de l'afficher toutes la liste dans le terminal page par page.
ls | less

La redirection:
>
l'utilisation du caractère «>» permet de rediriger la sortie d'une commande située
à gauche vers le fichier situé à droite
Syntaxe:
ls -al /home/hk/ > toto.txt

L'emploi d'un double caractère «>>» permet de concaténer la sortie  vers le fichier, c'est-
à-dire ajouter la sortie à la suite du fichier, sans l'écraser.



